[{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"http://plantedml.com/randomPlantedForest/articles/test/Regression-Test-oldrpf.html","id":"regression","dir":"Articles > Test","previous_headings":"","what":"Regression","title":"Regression Test: oldrpf","text":"supports loss = \"L2\" parameters epsilon delta applicable.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Theo Meyer. Author. Munir Hiabu. Author. Maike Spankus. Author. Marvin N. Wright. Author. Lukas Burk. Maintainer, author.","code":""},{"path":"http://plantedml.com/randomPlantedForest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hiabu et. al. (2020). Random Planted Forest: directly interpretable tree ensemble. arXiv preprint arXiv:2012.14563 (2020)","code":"@Article{,   title = {Random Planted Forest: a directly interpretable tree ensemble},   author = {{Hiabu} and {Munir} and {Mammen} and {Enno} and {Meyer} and Joseph T.},   journal = {arXiv},   year = {2020},   doi = {10.48550/ARXIV.2012.14563},   url = {https://arxiv.org/abs/2012.14563}, }"},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"randomplantedforest","dir":"","previous_headings":"","what":"Random Planted Forest: A Directly Interpretable Tree Ensemble","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"randomPlantedForest implements “Random Planted Forest”, directly interpretable tree ensemble (arxiv).","code":""},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"can install development version randomPlantedForest GitHub r-universe ","code":"# install.packages(\"remotes\") remotes::install_github(\"PlantedML/randomPlantedForest\") install.packages(\"randomPlantedForest\", repos = \"https://plantedml.r-universe.dev\")"},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"Model fitting uses familiar interface: Prediction components can accessed via predict_components, including intercept, main effects, interactions specified degree. returned object also contains original data x, required visualization. glex package can used well: glex(rpfit) yields result. Various visualization options available via glex, e.g. main second-order interaction effects:  See Bikesharing decomposition article examples.","code":"library(randomPlantedForest)  mtcars$cyl <- factor(mtcars$cyl) rpfit <- rpf(mpg ~ cyl + wt + hp, data = mtcars, ntrees = 25, max_interaction = 2) rpfit #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ cyl + wt + hp  #> Fit using 3 predictors and 2-degree interactions. #> Forest is _not_ purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 25 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         nthreads: 1 #>           purify: FALSE #>               cv: FALSE  predict(rpfit, new_data = mtcars) |>   cbind(mpg = mtcars$mpg) |>   head() #>      .pred  mpg #> 1 20.81459 21.0 #> 2 20.72354 21.0 #> 3 26.04526 22.8 #> 4 21.26845 21.4 #> 5 18.45921 18.7 #> 6 19.54406 18.1 components <- predict_components(rpfit, new_data = mtcars)   str(components) #> List of 3 #>  $ m        :Classes 'data.table' and 'data.frame':  32 obs. of  6 variables: #>   ..$ cyl   : num [1:32] 0.445 0.445 0.863 0.445 -1.274 ... #>   ..$ wt    : num [1:32] -0.0615 -0.1421 2.3182 -0.0155 -0.3116 ... #>   ..$ hp    : num [1:32] 0.162 0.162 2.021 0.162 -0.941 ... #>   ..$ cyl:wt: num [1:32] 0.00389 0.00389 0.69586 0.17156 0.4615 ... #>   ..$ cyl:hp: num [1:32] 0.1453 0.1453 -0.0511 0.1453 0.1179 ... #>   ..$ hp:wt : num [1:32] -0.1264 -0.1367 -0.0487 0.1138 0.1596 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ intercept: num 20.2 #>  $ x        :Classes 'data.table' and 'data.frame':  32 obs. of  3 variables: #>   ..$ cyl: Factor w/ 3 levels \"4\",\"6\",\"8\": 2 2 1 2 3 2 3 1 1 2 ... #>   ..$ wt : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ hp : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"class\")= chr [1:3] \"glex\" \"rpf_components\" \"list\" # install glex if not available: if (!requireNamespace(\"glex\")) remotes::install_github(\"PlantedML/glex\") #> Loading required namespace: glex library(glex) library(ggplot2) library(patchwork) # For plot arrangement  p1 <- autoplot(components, \"wt\") p2 <- autoplot(components, \"hp\") p3 <- autoplot(components, \"cyl\") p4 <- autoplot(components, c(\"wt\", \"hp\"))  (p1 + p2) / (p3 + p4) +   plot_annotation(     title = \"Selected effects for mtcars\",     caption = \"(It's a tiny dataset but it has to fit in a README, okay?)\"   )"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Planted Forest Predictions — predict.rpf","title":"Random Planted Forest Predictions — predict.rpf","text":"Random Planted Forest Predictions","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Planted Forest Predictions — predict.rpf","text":"","code":"# S3 method for rpf predict(   object,   new_data,   type = ifelse(object$mode == \"regression\", \"numeric\", \"prob\"),   ... )"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Planted Forest Predictions — predict.rpf","text":"object fit object class rpf. new_data Data new observations predict. type \"numeric\" regression outcomes, \"class\" class predictions \"prob\" probability predictions. classification loss = \"L1\" \"L2\", \"numeric\" yields raw predictions guaranteed valid probabilities [0, 1]. type = \"prob\", truncated ensure property. loss \"logit\" \"exponential\", type = \"link\" alias type = \"numeric\", case raw predictions additional interpretation similar linear predictor glm. ... Unused.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Planted Forest Predictions — predict.rpf","text":"regression: tbl column .pred number rows new_data. classification: tbl one column level y containing class probabilities type = \"prob\". type = \"class\", one column .pred class predictions returned. type = \"numeric\" \"link\", one column .pred raw predictions.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Planted Forest Predictions — predict.rpf","text":"","code":"# Regression with L2 loss rpfit <- rpf(y = mtcars$mpg, x = mtcars[, c(\"cyl\", \"wt\")]) predict(rpfit, mtcars[, c(\"cyl\", \"wt\")]) #> # A tibble: 32 × 1 #>    .pred #>    <dbl> #>  1  20.3 #>  2  20.4 #>  3  25.0 #>  4  20.6 #>  5  17.1 #>  6  18.7 #>  7  15.1 #>  8  23.1 #>  9  23.2 #> 10  19.5 #> # ℹ 22 more rows"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract predicted components from a Random Planted Forest — predict_components","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"Prediction components functional decomposition model prediction. sum components equals overall predicted value observation.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"","code":"predict_components(object, new_data, max_interaction = NULL, predictors = NULL)"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"object fit object class rpf. new_data Data new observations predict. max_interaction integer NULL: Maximum degree interactions consider. Default use max_interaction parameter rpf object. Must 1 (main effects ) max_interaction rpf object. predictors character NULL: Vector one column names predictor variables new_data extract components . NULL, variables interactions returned.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"list elements: m (data.table): Components main effect interaction term, representing functional decomposition prediction. components together intercept sum prediction. multiclass classification, number output columns multiplied number levels outcome. intercept (numeric(1)): Expected value prediction. x (data.table): Copy new_data containing predictors selected predictors. target_levels (character): multiclass classification : Vector target levels can used disassemble m, names include term target level.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"Extracts possible components max_interaction degrees, value set calling rpf(). intercept always included. Optionally predictors can specified include components including given variables. max_interaction greater length(predictors), max_interaction lowered accordingly.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"Depending number predictors max_interaction, number components increase drastically sum(choose(ncol(new_data), seq_len(max_interaction))).","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract predicted components from a Random Planted Forest — predict_components","text":"","code":"# Regression task, only some predictors train <-  mtcars[1:20, 1:4] test <-  mtcars[21:32, 1:4]  set.seed(23) rpfit <- rpf(mpg ~ ., data = train, max_interaction = 3, ntrees = 30)  # Extract all components, including main effects and interaction terms up to `max_interaction` (components <- predict_components(rpfit, test)) #> $m #>            cyl       disp         hp    cyl:disp      cyl:hp     disp:hp #>          <num>      <num>      <num>       <num>       <num>       <num> #>  1:  1.3171056  2.4939663  1.1179246 -0.01482717 -0.04027828 -0.42825535 #>  2: -0.8481770 -1.1761913  0.2848618  0.09476257  0.06668192  0.01536748 #>  3: -0.8481770 -1.1761913  0.2848618  0.09476257  0.06668192  0.01536748 #>  4: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #>  5: -0.8481770 -1.3837212  0.1665770  0.09270936  0.08321648 -0.02961805 #>  6:  1.3171056  4.6572097  3.3746638  0.93009887  0.30303006  0.04533263 #>  7:  1.3171056  2.4939663  3.3746638 -0.01482717  0.30303006 -0.19752497 #>  8:  1.3171056  4.6572097  1.1318509  0.93009887 -0.35303353 -0.10831095 #>  9: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #> 10: -0.6441787  0.6437832  0.1665770  0.13550304  0.09153429 -0.24911970 #> 11: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #> 12:  1.3171056  2.4939663  0.4186601 -0.01482717 -0.04027828 -0.27031439 #>      cyl:disp:hp #>            <num> #>  1: -0.046862620 #>  2:  0.009109767 #>  3:  0.009109767 #>  4:  0.084106744 #>  5:  0.008909305 #>  6:  0.077872127 #>  7:  0.101920822 #>  8:  0.011412415 #>  9:  0.084106744 #> 10: -0.024506959 #> 11:  0.084106744 #> 12: -0.046862620 #>  #> $intercept #> [1] 20.2796 #>  #> $x #>       cyl  disp    hp #>     <num> <num> <num> #>  1:     4 120.1    97 #>  2:     8 318.0   150 #>  3:     8 304.0   150 #>  4:     8 350.0   245 #>  5:     8 400.0   175 #>  6:     4  79.0    66 #>  7:     4 120.3    91 #>  8:     4  95.1   113 #>  9:     8 351.0   264 #> 10:     6 145.0   175 #> 11:     8 301.0   335 #> 12:     4 121.0   109 #>  #> attr(,\"class\") #> [1] \"glex\"           \"rpf_components\" \"list\"            # sums to prediction cbind(   m_sum = rowSums(components$m) + components$intercept,   prediction = predict(rpfit, test) ) #>       m_sum    .pred #> 1  24.67837 24.67837 #> 2  18.72601 18.72601 #> 3  18.72601 18.72601 #> 4  14.69731 14.69731 #> 5  18.36949 18.36949 #> 6  30.98491 30.98491 #> 7  27.65793 27.65793 #> 8  27.86593 27.86593 #> 9  14.69731 14.69731 #> 10 20.39919 20.39919 #> 11 14.69731 14.69731 #> 12 24.13705 24.13705  # Only get components with interactions of a lower degree, ignoring 3-way interactions predict_components(rpfit, test, max_interaction = 2) #> $m #>            cyl       disp         hp    cyl:disp      cyl:hp     disp:hp #>          <num>      <num>      <num>       <num>       <num>       <num> #>  1:  1.3171056  2.4939663  1.1179246 -0.01482717 -0.04027828 -0.42825535 #>  2: -0.8481770 -1.1761913  0.2848618  0.09476257  0.06668192  0.01536748 #>  3: -0.8481770 -1.1761913  0.2848618  0.09476257  0.06668192  0.01536748 #>  4: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #>  5: -0.8481770 -1.3837212  0.1665770  0.09270936  0.08321648 -0.02961805 #>  6:  1.3171056  4.6572097  3.3746638  0.93009887  0.30303006  0.04533263 #>  7:  1.3171056  2.4939663  3.3746638 -0.01482717  0.30303006 -0.19752497 #>  8:  1.3171056  4.6572097  1.1318509  0.93009887 -0.35303353 -0.10831095 #>  9: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #> 10: -0.6441787  0.6437832  0.1665770  0.13550304  0.09153429 -0.24911970 #> 11: -0.8481770 -1.1761913 -3.4381764  0.09476257  0.06607252 -0.36467941 #> 12:  1.3171056  2.4939663  0.4186601 -0.01482717 -0.04027828 -0.27031439 #>  #> $intercept #> [1] 20.2796 #>  #> $x #>       cyl  disp    hp #>     <num> <num> <num> #>  1:     4 120.1    97 #>  2:     8 318.0   150 #>  3:     8 304.0   150 #>  4:     8 350.0   245 #>  5:     8 400.0   175 #>  6:     4  79.0    66 #>  7:     4 120.3    91 #>  8:     4  95.1   113 #>  9:     8 351.0   264 #> 10:     6 145.0   175 #> 11:     8 301.0   335 #> 12:     4 121.0   109 #>  #> $remainder #>  [1] -0.046862620  0.009109767  0.009109767  0.084106744  0.008909305 #>  [6]  0.077872127  0.101920822  0.011412415  0.084106744 -0.024506959 #> [11]  0.084106744 -0.046862620 #>  #> attr(,\"class\") #> [1] \"glex\"           \"rpf_components\" \"list\"            # Only retrieve main effects (main_effects <- predict_components(rpfit, test, max_interaction = 1)) #> $m #>            cyl       disp         hp #>          <num>      <num>      <num> #>  1:  1.3171056  2.4939663  1.1179246 #>  2: -0.8481770 -1.1761913  0.2848618 #>  3: -0.8481770 -1.1761913  0.2848618 #>  4: -0.8481770 -1.1761913 -3.4381764 #>  5: -0.8481770 -1.3837212  0.1665770 #>  6:  1.3171056  4.6572097  3.3746638 #>  7:  1.3171056  2.4939663  3.3746638 #>  8:  1.3171056  4.6572097  1.1318509 #>  9: -0.8481770 -1.1761913 -3.4381764 #> 10: -0.6441787  0.6437832  0.1665770 #> 11: -0.8481770 -1.1761913 -3.4381764 #> 12:  1.3171056  2.4939663  0.4186601 #>  #> $intercept #> [1] 20.2796 #>  #> $x #>       cyl  disp    hp #>     <num> <num> <num> #>  1:     4 120.1    97 #>  2:     8 318.0   150 #>  3:     8 304.0   150 #>  4:     8 350.0   245 #>  5:     8 400.0   175 #>  6:     4  79.0    66 #>  7:     4 120.3    91 #>  8:     4  95.1   113 #>  9:     8 351.0   264 #> 10:     6 145.0   175 #> 11:     8 301.0   335 #> 12:     4 121.0   109 #>  #> $remainder #>  [1] -0.53022343  0.18592174  0.18592174 -0.11973758  0.15521709  1.35633369 #>  [7]  0.19259874  0.48016681 -0.11973758 -0.04658934 -0.11973758 -0.37228247 #>  #> attr(,\"class\") #> [1] \"glex\"           \"rpf_components\" \"list\"            # The difference is the combined contribution of interaction effects cbind(   m_sum = rowSums(main_effects$m) + main_effects$intercept,   prediction = predict(rpfit, test) ) #>       m_sum    .pred #> 1  25.20859 24.67837 #> 2  18.54009 18.72601 #> 3  18.54009 18.72601 #> 4  14.81705 14.69731 #> 5  18.21428 18.36949 #> 6  29.62858 30.98491 #> 7  27.46533 27.65793 #> 8  27.38576 27.86593 #> 9  14.81705 14.69731 #> 10 20.44578 20.39919 #> 11 14.81705 14.69731 #> 12 24.50933 24.13705"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an rpf fit — print.rpf","title":"Print an rpf fit — print.rpf","text":"Print rpf fit","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an rpf fit — print.rpf","text":"","code":"# S3 method for rpf print(x, ...)"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an rpf fit — print.rpf","text":"x object class rpf. ... arguments passed methods.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an rpf fit — print.rpf","text":"Invisibly: x.","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an rpf fit — print.rpf","text":"","code":"rpf(mpg ~ cyl + wt + drat, data = mtcars, max_interaction = 2, ntrees = 10) #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ cyl + wt + drat  #> Fit using 3 predictors and 2-degree interactions. #> Forest is _not_ purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 10 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         nthreads: 1 #>           purify: FALSE #>               cv: FALSE"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Compact printing of forest structures — print.rpf_forest","title":"Compact printing of forest structures — print.rpf_forest","text":"methods provided avoid flooding console long nested lists containing tree structures. Note","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compact printing of forest structures — print.rpf_forest","text":"","code":"# S3 method for rpf_forest print(x, ...)  # S3 method for rpf_forest str(object, ...)"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compact printing of forest structures — print.rpf_forest","text":"x Object class rpf_forest ... arguments passed methods. object Object class rpf_forest","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compact printing of forest structures — print.rpf_forest","text":"","code":"rpfit <- rpf(mpg ~ cyl + wt, data = mtcars, ntrees = 10) print(rpfit$forest) #> <rpf_forest> of 10 trees str(rpfit$forest) #> <rpf_forest> of 10 trees"},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":null,"dir":"Reference","previous_headings":"","what":"Purify a Random Planted Forest — purify","title":"Purify a Random Planted Forest — purify","text":"TODO: Explain ","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purify a Random Planted Forest — purify","text":"","code":"purify(x, ...)  # S3 method for default purify(x, ...)  # S3 method for rpf purify(x, ...)  is_purified(x)"},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purify a Random Planted Forest — purify","text":"x object class rpf. ... (Unused)","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purify a Random Planted Forest — purify","text":"Invisibly: rpf object.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purify a Random Planted Forest — purify","text":"Unless rpf() called purify = TRUE, forest purified fit ensure components extracted predict_components() valid. predict_components() automatically purify forest is_purified() reports FALSE.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purify a Random Planted Forest — purify","text":"","code":"rpfit <- rpf(mpg ~., data = mtcars, max_interaction = 2, ntrees = 10) purify(rpfit) #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ .  #> Fit using 10 predictors and 2-degree interactions. #> Forest is purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 10 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         nthreads: 1 #>           purify: FALSE #>               cv: FALSE"},{"path":"http://plantedml.com/randomPlantedForest/reference/randomPlantedForest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","title":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","text":"implementation Random Planted Forest algorithm directly interpretable tree ensembles based functional ANOVA decomposition.","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/randomPlantedForest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","text":"Maintainer: Lukas Burk burk@leibniz-bips.de (ORCID) Authors: Joseph Theo Meyer Munir Hiabu Maike Spankus Marvin N. Wright cran@wrig.de","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Planted Forest — rpf","title":"Random Planted Forest — rpf","text":"Random Planted Forest","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Planted Forest — rpf","text":"","code":"rpf(x, ...)  # S3 method for data.frame rpf(   x,   y,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   nthreads = 1,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for matrix rpf(   x,   y,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   nthreads = 1,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for formula rpf(   formula,   data,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   nthreads = 1,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for recipe rpf(   x,   data,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   nthreads = 1,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )"},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Planted Forest — rpf","text":"x, data Feature matrix, data.frame, recipe. ... (Unused). y Target vector use x. class y (either numeric factor) determines regression classification performed. max_interaction [1]: Maximum level interaction determining maximum number split dimensions tree. default 1 corresponds main effects . 0, number fo columns x used, .e. 10 predictors, equivalent setting max_interaction = 10. ntrees [50]: Number trees generated per family. splits [30]: Number splits performed tree family. split_try [10]: Number split points considered choosing split candidate. t_try [0.4]: value (0,1] specifying proportion viable split-candidates round. deterministic [FALSE]: Choose whether approach deterministic random. nthreads [1L]: Number threads used computation, defaulting serial execution. purify [FALSE]: Whether forest purified. Set TRUE enable components extract predict_components() valid. Can achieved fitting purify(). cv [FALSE]: Determines cross validation performed. loss [\"L2\"]: regression, \"L2\" supported. classification, \"L1\", \"logit\" \"exponential\" also available. \"exponential\" yields similar results \"logit\" significantly faster. delta [0]: used loss \"logit\" \"exponential\". Proportion class membership truncated smaller 1-delta calculating loss determine optimal split. epsilon [0.1]: used loss = \"logit\" \"exponential\". Proportion class membership truncated smaller 1-epsilon calculating fit leaf. formula Formula specification, e.g. y ~ x1 + x2.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Planted Forest — rpf","text":"Object class \"rpf\" model object contained $fit.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Planted Forest — rpf","text":"","code":"# Regression with x and y rpfit <- rpf(x = mtcars[, c(\"cyl\", \"wt\")], y = mtcars$mpg)  # Regression with formula rpfit <- rpf(mpg ~ cyl + wt, data = mtcars)"},{"path":"http://plantedml.com/randomPlantedForest/news/index.html","id":"randomplantedforest-0219000-development-version","dir":"Changelog","previous_headings":"","what":"randomPlantedForest 0.2.1.9000 (Development version)","title":"randomPlantedForest 0.2.1.9000 (Development version)","text":"Internals src/ refactored modular sub-files (#53) rpf() now errors regression target combined loss \"L2\". Allow features type logical, now converted via .integer. parallel = TRUE|FALSE argument rpf() substituted nthreads = 1L argument, allowing flexible parallelization. previous behavior allowed either parallelization using n-1 n available cores. new implementation reasonably robust default behavior remains serial execution. Remove SystemRequirements field DESCRIPTION: Now default C++ version C++17 minor change internal use random numbers, randomPlantedForest now compatible C++11 C++23. Add remainder term predict_components output case max_interaction supplied smaller max_interaction rpf fit. case, m values don’t sum global predictions, add remainder allow reconstruction property.","code":""},{"path":"http://plantedml.com/randomPlantedForest/news/index.html","id":"randomplantedforest-021","dir":"Changelog","previous_headings":"","what":"randomPlantedForest 0.2.1","title":"randomPlantedForest 0.2.1","text":"Add glex class output predict_components(), extended functionality available glex. Add target_levels vector output predict_components() aid multiclass handling. Keeping track levels somewhat awkward since column names $m need identifiable regarding target level.","code":""},{"path":"http://plantedml.com/randomPlantedForest/news/index.html","id":"randomplantedforest-020","dir":"Changelog","previous_headings":"","what":"randomPlantedForest 0.2.0","title":"randomPlantedForest 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
